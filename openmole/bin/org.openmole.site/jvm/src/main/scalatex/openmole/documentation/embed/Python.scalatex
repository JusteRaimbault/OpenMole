
@import org.openmole.site.tools._
@import org.openmole.site._
@import org.openmole.site.content.Native._



@h2{PythonTask syntax}

@h3{Preliminary remark}

@usesSingularity("PythonTask")

The @code{PythonTask} relies on an underlying @code{ContainerTask} but is designed to be transparent and takes only python-related arguments.

@h3{Arguments of the PythonTask}

It takes the following arguments :

@ul
   @li{@code{script} String or file, mandatory. The python script to be executed.}
   @li{@code{major} Int, optional (default = 3). Major version of python to run - MUST be either 2 or 3.}
   @li{@code{install} Sequence of strings, optional (default = empty). The commands to be executed prior to any python packages installation and script execution (to install libraries on the system).}
   @li{@code{libraries} Sequence of strings, optional (default = empty). The name of python libraries (through pip) that will be used by the script and need to be installed before (note: as detailed below, installations are only achieved during the first execution of the script, and then stored in a docker image in cache. To force an update, use the @i{forceUpdate} argument).}
   @li{@code{forceUpdate} Boolean, optional (default = false). Should the libraries installation be forced (to ensure an update for example). If true, the task will perform the installation (and thus the update) even if the library was already installed.}

@h2{Embedding a Python script}

@p The toy Python script for this test case is:
@br @hl("""
import sys

f = open("output.txt", 'w')
f.write(str(arg))
""", "python")

@p We save this to @i{hello.py}. It does nothing but printing its first argument to the file passed as a second argument.

@p To run this script in OpenMOLE upload @i{hello.py} in you workspace. You can then use the following script:
@br @hl.openmole("""
/// Declare the variable
val arg = Val[Int]
val output = Val[File]

// python task
val pythonTask =
  PythonTask(workDirectory / "hello.py") set (
    inputs += arg.mapped,
    outputs += arg,
    outputs += output mapped "output.txt",
  )

val copy = CopyFileHook(output, workDirectory / "result/hello${arg}.txt")
val env = LocalEnvironment(2)

DirectSampling(
  evaluation = pythonTask,
  sampling = arg in (0 to 10)
) hook copy on env""")

@p Notions from OpenMOLE are reused in this example. If you're not too familiar with @a("Environments", href := DocumentationPages.scale.file), @a("Groupings", href := DocumentationPages.scale.file + "#Grouping"), @a("Hooks", href := DocumentationPages.hook.file) or @a("Samplings", href := DocumentationPages.samplings.file), check the relevant sections of the documentation.


@h2{Using Python packages}

@p One crucial advantage of the Python programming environment is its broad ecosystem of packages, for example used in the machine learning community.
You can use python packages in your script, through the @code{libraries} argument.

@p Below is an example, available on @aa("the marketplace", href:= "https://github.com/openmole/openmole-market"), which applies a very basic "machine learning"
technique (logistic regression) using the scikit-learn python packages, to the outputs of a Netlogo model, providing a sort of "meta-model" to predict the outputs
of the simulation model as a function of its parameters without running it.

@p The syntax for the python task is the following:

@br @hl.openmole("""
val training = Val[File]
val validation = Val[File]
val errdensity = Val[Array[Double]]
val errresistance = Val[Array[Double]]
val score = Val[Double]

val sklearnclassifier =
  PythonTask(
    workDirectory / "logisticregression.py",
    libraries = Seq("pandas","numpy","sklearn")
  ) set (
    inputs += training mapped "data/training.csv",
    inputs += validation mapped "data/validation.csv",
    outputs += errdensity mapped "errdensity",
    outputs += errresistance mapped "errresistance",
    outputs += score mapped "score"
  )""")

@br
with the following python script:

@br @hl.python("""
from sklearn.linear_model import LogisticRegression
import pandas
import numpy

d = pandas.read_csv('data/training.csv')
dp = pandas.read_csv('data/validation.csv')

X = d[['density','resistance']]
y = d['binaryburnt']

Xp = dp[['density','resistance']]
yp = dp['binaryburnt']

clf = LogisticRegression(random_state=0, solver='lbfgs').fit(X, y)
pred = clf.predict(Xp)
prederror = dp.loc[abs(pred - yp)==1]

# define outputs - must be "standard types", not objects (basic types and multidimensional lists)
errdensity = list(prederror['density'])
errresistance = list(prederror['resistance'])
score = clf.score(Xp,yp)
""")

@p See the market entry for plugging with NetLogo and complete script.


