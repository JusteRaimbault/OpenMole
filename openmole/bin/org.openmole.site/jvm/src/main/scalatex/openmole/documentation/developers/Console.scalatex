@import org.openmole.site.tools._
@import org.openmole.site._


@aa("OpenMOLE GUI", href := DocumentationPages.gui.file) implements all the OpenMOLE features. However you may be interested in using OpenMOLEÂ in interactive console mode.
To do so, use the @i("-c") argument in your console : @hl("""./openmole -c""", "plain")
@br
The only difference between the script in the console mode and the ones from the editor concerns the way you launch the execution, you cancel it and you follow the execution progress. An console workflow is launched like this:

  @br @hl.code("""val ex = exploration -< (model on env) start""")

  @p Using the ex and the env variables you can follow the progress of the execution by using the commands: @hl("print(ex)", "plain") and @hl("print(env)", "plain"). To cancel the execution you should use: @hl("ex.cancel", "plain").


@h2{Authentications}

In console mode, you can define an authentication using a pair of login / password with the following command:
@br @hl.openmole("""
  SSHAuthentication += LoginPassword("login", encrypted, "machine-name")""".stripMargin, header = """def encrypted = "" """)

@p Or to authenticate with a private key:
@br @hl.openmole("""
    SSHAuthentication += PrivateKey("/path/to/the/private/key", "login", encrypted, "machine-name")""", header = """def encrypted = "" """)

@p It mentions the @i{encrypted} function. This function will prompt for the password/passphrase of the private key right after the call to the builder of the @i{Environment} using this @hl.openmole("SSHAuthentication").

@p The last part of the @hl.openmole("SSHAuthentication"): "machine-name" should match exactly the address of the machine in your execution environment. OpenMOLE searches the matching ssh keys using an @b{exact match} on @i{login} and @i{machine-name} between the environment and the stored keys.

@h2{Run script}

In console mode, you have to copy-paste your whole workflow to run it.
The only difference between the script in the console mode and the ones from the editor concerns the way you launch the execution,
you cancel it and you follow the execution progress.

A console workflow is launched like this:
@hl.code("""
val ex = exploration -< (model on env) start""")

Note that you need to invoke the @hl("start", "plain") on your workflow, in contrary to Editor mode.

@break

Using the @i{ex} and the @i{env} variables you can follow the progress of the execution by using the commands:
@hl("print(ex)", "plain") and @hl("print(env)","plain").

@break

To cancel the execution you should use: @hl("ex.cancel", "plain").
